@include describe("The _json-decode--number function") {
    $test-1:  nth(_json-decode--number('0', 2), 2);
    $test-2:  nth(_json-decode--number('10', 2), 2);
    $test-3:  nth(_json-decode--number('123456789', 2), 2);
    $test-4:  nth(_json-decode--number('-0', 2), 2);
    $test-5:  nth(_json-decode--number('-10', 2), 2);
    $test-6:  nth(_json-decode--number('-123456789', 2), 2);
    $test-7:  nth(_json-decode--number('0.001', 2), 2);
    $test-8:  nth(_json-decode--number('-0.001', 2), 2);
    $test-9:  nth(_json-decode--number('1.5', 2), 2);
    $test-10: nth(_json-decode--number('-1.5', 2), 2);
    $test-11: nth(_json-decode--number('1e0', 2), 2);
    $test-12: nth(_json-decode--number('1e1', 2), 2);
    $test-13: nth(_json-decode--number('1e2', 2), 2);
    $test-14: nth(_json-decode--number('1e+0', 2), 2);
    $test-15: nth(_json-decode--number('1e+1', 2), 2);
    $test-16: nth(_json-decode--number('1e+2', 2), 2);
    $test-17: nth(_json-decode--number('1E0', 2), 2);
    $test-18: nth(_json-decode--number('1E1', 2), 2);
    $test-19: nth(_json-decode--number('1E2', 2), 2);
    $test-20: nth(_json-decode--number('1E+0', 2), 2);
    $test-21: nth(_json-decode--number('1E+1', 2), 2);
    $test-22: nth(_json-decode--number('1E+2', 2), 2);
    $test-23: nth(_json-decode--number('1e-0', 2), 2);
    $test-24: nth(_json-decode--number('1e-1', 2), 2);
    $test-25: nth(_json-decode--number('1e-2', 2), 2);
    $test-26: nth(_json-decode--number('1E-0', 2), 2);
    $test-27: nth(_json-decode--number('1E-1', 2), 2);
    $test-28: nth(_json-decode--number('1E-2', 2), 2);
    $test-29: nth(_json-decode--number('  1  ', 2), 2);
    $test-30: nth(_json-decode--number('1e', 2), 2);
    $test-31: nth(_json-decode--number('1e+', 2), 2);
    $test-32: nth(_json-decode--number('1e-', 2), 2);
    $test-33: nth(_json-decode--number('.1', 2), 2);
    $test-34: nth(_json-decode--number('1.', 2), 2);

  @include it("should properly decode integers") {
    @include should(expect($test-1), to(equal(0)));
    @include should(expect($test-2), to(equal(10)));
    @include should(expect($test-3), to(equal(123456789)));
  }

  @include it("should properly decode negative numbers") {
    @include should(expect($test-4), to(equal(0)));
    @include should(expect($test-5), to(equal(-10)));
    @include should(expect($test-6), to(equal(-123456789)));
  }

  @include it("should properly decode numbers with digits") {
    @include should(expect($test-7), to(equal(0.001)));
    @include should(expect($test-8), to(equal(-0.001)));
    @include should(expect($test-9), to(equal(1.5)));
    @include should(expect($test-10), to(equal(-1.5)));
  }

  @include it("should properly decode numbers with exponents") {
    @include should(expect($test-11), to(equal(1)));
    @include should(expect($test-12), to(equal(10)));
    @include should(expect($test-13), to(equal(100)));
    @include should(expect($test-14), to(equal(1)));
    @include should(expect($test-15), to(equal(10)));
    @include should(expect($test-16), to(equal(100)));
    @include should(expect($test-17), to(equal(1)));
    @include should(expect($test-18), to(equal(10)));
    @include should(expect($test-19), to(equal(100)));
    @include should(expect($test-20), to(equal(1)));
    @include should(expect($test-21), to(equal(10)));
    @include should(expect($test-22), to(equal(100)));
  }

  @include it("should properly decode numbers with negative exponents") {
    @include should(expect($test-23), to(equal(1)));
    @include should(expect($test-24), to(equal(.1)));
    @include should(expect($test-25), to(equal(.01)));
    @include should(expect($test-26), to(equal(1)));
    @include should(expect($test-27), to(equal(.1)));
    @include should(expect($test-28), to(equal(.01)));
  }

  @include it("should return false whenever the value is not valid JSON") {
    @include should(expect($test-29), to(equal(false)));
    @include should(expect($test-30), to(equal(false)));
    @include should(expect($test-31), to(equal(false)));
    @include should(expect($test-32), to(equal(false)));
    @include should(expect($test-33), to(equal(false)));
    @include should(expect($test-34), to(equal(false)));
  }

  @include it("should decode to number type") {
    @include should(expect(type-of($test-1 )), to(equal('number')));
    @include should(expect(type-of($test-2 )), to(equal('number')));
    @include should(expect(type-of($test-3 )), to(equal('number')));
    @include should(expect(type-of($test-4 )), to(equal('number')));
    @include should(expect(type-of($test-5 )), to(equal('number')));
    @include should(expect(type-of($test-6 )), to(equal('number')));
    @include should(expect(type-of($test-7 )), to(equal('number')));
    @include should(expect(type-of($test-8 )), to(equal('number')));
    @include should(expect(type-of($test-9 )), to(equal('number')));
    @include should(expect(type-of($test-10)), to(equal('number')));
    @include should(expect(type-of($test-11)), to(equal('number')));
    @include should(expect(type-of($test-12)), to(equal('number')));
    @include should(expect(type-of($test-13)), to(equal('number')));
    @include should(expect(type-of($test-14)), to(equal('number')));
    @include should(expect(type-of($test-15)), to(equal('number')));
    @include should(expect(type-of($test-16)), to(equal('number')));
    @include should(expect(type-of($test-17)), to(equal('number')));
    @include should(expect(type-of($test-18)), to(equal('number')));
    @include should(expect(type-of($test-19)), to(equal('number')));
    @include should(expect(type-of($test-20)), to(equal('number')));
    @include should(expect(type-of($test-21)), to(equal('number')));
    @include should(expect(type-of($test-22)), to(equal('number')));
    @include should(expect(type-of($test-23)), to(equal('number')));
    @include should(expect(type-of($test-24)), to(equal('number')));
    @include should(expect(type-of($test-25)), to(equal('number')));
    @include should(expect(type-of($test-26)), to(equal('number')));
    @include should(expect(type-of($test-27)), to(equal('number')));
    @include should(expect(type-of($test-28)), to(equal('number')));
  }

  @include it("should return false when syntax is invalid JSON") {
    @include should(expect(nth(_json-decode--number('1e+-1', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--number('1e-+1', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--number('1a-+1', 2), 2)), to(equal(false)));
  }
}
