@include describe("The json-decode--list function") {
  @include it("should properly decode arrays to lists") {
    @include should(expect(nth(_json-decode--list('[0, 1, 2, 3]', 2), 2)), to(equal(0 1 2 3)));
    @include should(expect(nth(_json-decode--list('["a", "b", "c", "d"]', 2), 2)), to(equal("a" "b" "c" "d")));
    @include should(expect(nth(_json-decode--list('[true, false, false, true, true]', 2), 2)), to(equal(true false false true true)));
    @include should(expect(nth(_json-decode--list('["red", "#405060", "rgb(0, 0, 0)"]', 2), 2)), to(equal(red #405060 black)));
  }

  @include it("should properly decode multi-dimensional arrays to nested lists") {
    @include should(expect(nth(_json-decode--list('[0, 1, [2, 3, [4, 5], 6]]', 2), 2)), to(equal(0 1 (2 3 (4 5) 6))));
    @include should(expect(nth(_json-decode--list('[["a", "b", ["c", "d"]], "e"]', 2), 2)), to(equal(("a" "b" ("c" "d")) "e")));
    @include should(expect(nth(_json-decode--list('[true, false, [false, true], true]', 2), 2)), to(equal(true false (false true) true)));
    @include should(expect(nth(_json-decode--list('[[true], [false], [false, true], true]', 2), 2)), to(equal((true) (false) (false true) true)));
  }

  @include it("should properly decode arrays with weird spaces to lists") {
    @include should(expect(nth(_json-decode--list('[   0 ,    1    ,    2,3  ]', 2), 2)), to(equal(0 1 2 3)));
  }

  @include it("should properly decode empty arrays") {
    //@include should(expect(nth(_json-decode--list('[]', 2), 2)), to(equal(())));
    //@include should(expect(nth(_json-decode--list('[ ]', 2), 2)), to(equal(())));
  }

  @include it("should return false when arrays are invalid") {
    @include should(expect(nth(_json-decode--list('[0, 1, 2', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--list('0, 1, 2]', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--list('[0 1, 2]', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--list('[0 1,, 2]', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--list('[0 1, 2,]', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--list('[,0 1,, 2,]', 2), 2)), to(equal(false)));
  }

  @include it("should decode to list type") {
    @include should(expect(type-of(nth(_json-decode--list('[0, 1, 2, 3]', 2), 2))), to(equal('list')));
    @include should(expect(type-of(nth(_json-decode--list('["a", "b", "c", "d"]', 2), 2))), to(equal('list')));
    @include should(expect(type-of(nth(_json-decode--list('[true, false, false, true, true]', 2), 2))), to(equal('list')));
  }
}
